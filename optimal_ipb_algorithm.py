# -*- coding: utf-8 -*-

"""
/***************************************************************************
 OPTIMAL-IPB
                                 A QGIS plugin
 This plugin adds an algorithm to calculate palm tree on high resolution imagery based on machine learning
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-09-22
        copyright            : (C) 2020 by Muhammad Nurdin
        email                : muhanur@apps.ipb.ac.id
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from __future__ import division

__author__ = 'Muhammad Nurdin'
__date__ = '2020-09-22'
__copyright__ = '(C) 2020 by Muhammad Nurdin'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsPoint,
                       QgsFields,
                       QgsField,
                       QgsFeature,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterFeatureSink)

import numpy as np
import time
import pandas
import os
import inspect

from osgeo import gdal

from qgis.PyQt.QtCore import QVariant

from .keras_retinanet.models import load_model
from .keras_retinanet.utils.image import preprocess_image, resize_image

from .helpers import sliding_window
from .helpers import format_img
from .helpers import get_real_coordinates
from .helpers import pixel2coord
from .helpers import non_max_suppression_fast
from .helpers import map_uint16_to_uint8

scorethreshold = 0.5
iouthreshold = 0.5
bboxes = []

class minmax: 
    def __init__(self, minimum, maximum): 
        self.minimum = minimum 
        self.maximum = maximum

def detect_palm(model, ds, x, y, winW, winH, minmaxlist):
    # crop image
    a_image = ds.ReadAsArray(x, y, winW, winH)
    datatype = ds.GetRasterBand(1).DataType
    
    normalizedImg = []
    
    if not datatype == 1:
        for i in range(3):
            band_255 = map_uint16_to_uint8(a_image[i], int(minmaxlist[i].minimum), int(minmaxlist[i].maximum))
            normalizedImg.append(band_255)
            
        normalizedImg = np.dstack((normalizedImg[2], normalizedImg[1], normalizedImg[0]))
        
    else:
        normalizedImg = np.dstack(((a_image[2],a_image[1],a_image[0])))
    
    # preprocess image for network
    image = preprocess_image(normalizedImg)
    image, scale = resize_image(image)
    
    # process image
    boxes, scores, labels = model.predict_on_batch(np.expand_dims(image, axis=0))
    
    # correct for image scale
    boxes /= scale
    
    # select indices which have a score above the threshold
    indices = np.where(scores[0, :] >= scorethreshold)[0]
    
    # select those scores
    scores = scores[0][indices]
    
    # find the order with which to sort the scores
    scores_sort = np.argsort(-scores)
    
    # select detections
    image_boxes = boxes[0, indices[scores_sort], :]
    
    for i in indices:
        b = np.array(image_boxes[i,:]).astype(int)
        x1 = b[0] + x
        y1 = b[1] + y
        x2 = b[2] + x
        y2 = b[3] + y
        bboxes.append([x1, y1, x2, y2])
    
    return bboxes
    #bscores.extend(scores)

class OptimalIpbAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT,
                self.tr('Input raster layer'),
                [QgsProcessing.TypeRaster]
            )
        )

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output Layer'),
                QgsProcessing.TypeVectorPoint
            )
        )
    
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        
        (winW, winH, stepSize) = (500, 500, 470)
        
        # load model
        model = load_model(r'/export/GOOGLE500-101.h5', backbone_name='resnet101')
        source = self.parameterAsRasterLayer(parameters, self.INPUT, context)
        
        # prepare writer
        outFeat = QgsFeature()
        fields = QgsFields()
        fields.append(QgsField('Object', QVariant.String))
        outFeat.setFields(fields)
        
        # get CRS from raster source
        ds = gdal.Open(source.source())
        width = ds.RasterXSize
        height = ds.RasterYSize
        rastercount = ds.RasterCount
        datatype = ds.GetRasterBand(1).DataType
        minmaxlist = []
        
        for bandId in range(ds.RasterCount):
            bandId = bandId + 1
            band = ds.GetRasterBand(bandId)
            band_arr_tmp = band.ReadAsArray()
            min, max = np.percentile(band_arr_tmp, (2, 98))
            minmaxlist.append( minmax(min, max) )
        
        #create the output sink
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context, fields, 1, source.crs())
        
        for (x, y) in sliding_window(width, height, stepSize):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break
            
            # Stop sliding windows if widows end
            if x + winW > width and y + winH > height:
                xl = width - winW
                yl = height - winH
                detect_palm(model, ds, xl, yl, winW, winH, minmaxlist)
                continue

            if x + winW > width:
                xl = width - winW
                detect_palm(model, ds, xl, y, winW, winH, minmaxlist)
                continue
            
            if y + winH > height:
                yl = height - winH
                detect_palm(model, ds, x, yl, winW, winH, minmaxlist)
                continue
            
            detect_palm(model, ds, x, y, winW, winH, minmaxlist)
                
        bboxeses = np.array(bboxes, dtype=np.float32)
        
        # non max suppression on overlay bboxes
        new_boxes = non_max_suppression_fast(bboxeses, overlapThresh=iouthreshold)
        
        for jk in range(new_boxes.shape[0]):
            
            b = np.array(new_boxes[jk,:]).astype(int)
            
            x1 = b[0]
            y1 = b[1]
            x2 = b[2]
            y2 = b[3]
            
            # Centroid
            xc  = (x1 + x2) / 2
            yc  = (y1 + y2) / 2
            
            # get geo coordinate
            (coor_x, coor_y)  = pixel2coord(ds, xc, yc)
            
            # append coordinate to array point
            outFeat.setGeometry( QgsPoint( coor_x, coor_y ) )
            outFeat.setAttributes(['Sawit'])
            
            #feedback.setProgress(int(current * total))
            
            sink.addFeature(outFeat, QgsFeatureSink.FastInsert)
        
        return {self.OUTPUT: dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'OPTIMAL-IPB'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def icon(self):
        cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]
        icon = QIcon(os.path.join(os.path.join(cmd_folder, 'logo.png')))
        return icon

    def createInstance(self):
        return OptimalIpbAlgorithm()
